<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Send it to you🌹!</title>
  
  <subtitle>Look into my eyes - you will see what you mean to me.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://uncleding.top/"/>
  <updated>2019-01-24T06:16:18.079Z</updated>
  <id>https://uncleding.top/</id>
  
  <author>
    <name>UncleDing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Responsive for Web</title>
    <link href="https://uncleding.top/2019/01/23/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E7%90%86%E8%A7%A3/"/>
    <id>https://uncleding.top/2019/01/23/响应式布局理解/</id>
    <published>2019-01-23T10:56:22.000Z</published>
    <updated>2019-01-24T06:16:18.079Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近认真的看了下响应式布局-有些小感想-在这里记述一下吧"><a href="#最近认真的看了下响应式布局-有些小感想-在这里记述一下吧" class="headerlink" title="最近认真的看了下响应式布局,有些小感想,在这里记述一下吧."></a>最近认真的看了下响应式布局,有些小感想,在这里记述一下吧.</h4><h4 id="一丶国内的学习环境还是挺差的"><a href="#一丶国内的学习环境还是挺差的" class="headerlink" title="一丶国内的学习环境还是挺差的"></a>一丶国内的学习环境还是挺差的</h4><p>　虽然看起来挺不合题意得,但是事情的结果挺值的我吐槽一下的,我之前是一个初学者,哪怕到现在也是,也算上看过许多的知识IP了,但是很多属于下水道产品,哪怕我自己现在也在做这种事情,所以我觉得还是留给自己看吧,以后的都不叫Blog,叫Notes、小记.当然相当多的博客还是很不错的,很是值得我去学习,去膜拜.但是有些重复率太高了,一篇文章无数人搬,所以这也是我脱离某度去谷歌的原因.其次就是国内网站叫w3school,它属于一个落后版本,在2011年的时候出现了一个这个网站的迭代版本,叫w3schools <a href="https://www.w3schools.com" target="_blank" rel="noopener">w3schools</a>,然而经过我的验证并不能在国内访问,看看国内能够访问的w3school的装修,再看看w3schools的装潢,一个精装,一个毛坯.这样的例子比比皆是,所以我觉得能够找个梯子还是挺好的,谷歌搜索中文搜不到答案换英文一定可以,有几个固定问答网站的IP也是很不错的.哪怕是看看ins,twitter也是不错的,今天感受了一下来自Facebook的PWA,感觉很流畅,感觉应该不会逊色于原生.</p><h4 id="二、聊聊响应式吧"><a href="#二、聊聊响应式吧" class="headerlink" title="二、聊聊响应式吧"></a>二、聊聊响应式吧</h4><p>　我觉得适配一直是一个无论在哪个终端设备平台上不会少的话题,其实响应式在我看来就是一种屏幕适配方案,我之前比较自满了,我一直认为就是写媒体查询就可以了,但是来公司工作之后我才发现事情并不是这么简单,没办法,<code>成年的雄狮只有学会捕猎才能得到狮群的认可</code>,自己好好看呗.正好最近有一个小demo,需要做一些移动端的适配,我当时为了追求速度果断选择了bootstrap,因为网页也不是特别追求细节,而且时间成本应该会很低.这样浑浑噩噩的做完之后,我在偶然浏览网站的时候发现了一个让我很懊恼的事情,这个网站就是w3schools,我看到他的Mobile layout的一个section,其实他在对于bootstrap栅格系统进行分析,其实无非就是将网页的一段水平长度划分为12列,按百分比进行赋值,在页面元素绑定响应类名,之后通过媒体查询针对于不同设备的分辨率打上几个不同的断点,之后就可以实现一个基本的响应式布局,我这里有一个经典三栏式布局的案例,可以一起看一下.  </p><p><div align="center"><br><img src="/2019/01/23/响应式布局理解/../响应式布局理解/first.png" width="300" height="300" alt="pc端" title="pc端" align="center"><br>　<em>这是pc端的布局样式</em><br></div> </p><p><div align="center"><br>　<br><img src="/2019/01/23/响应式布局理解/../响应式布局理解/mobile.png" width="300" height="500" alt="分辨率<600" title="分辨率<600"><br> 这是屏幕&lt;600px的样式<br></div><br>　　<br>　　其实这是一个很简单的问题,我当时还引用了bootstrap,其实对于一个想要从事前端的人来说不是很应该,当然bootstrap很巧妙,因为我的业务决定了只需要他的栅格系统,手动写css样式也代码量也很少,讲道理来说很不应该,算是涨个经验吧  </p><h4 id="三、总结一下"><a href="#三、总结一下" class="headerlink" title="三、总结一下"></a>三、总结一下</h4><p>　其实我在工作后有了一些对于前端工作的感觉，其实对于基础的业务，还是要多练习比较好，精巧的东西还是要建立在基础之上么，慢慢来吧，路上的坑应该还不少．　　<br>　<code>你对自己要求高一点,你才有资格要求别人</code>–Uncleding </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;最近认真的看了下响应式布局-有些小感想-在这里记述一下吧&quot;&gt;&lt;a href=&quot;#最近认真的看了下响应式布局-有些小感想-在这里记述一下吧&quot; class=&quot;headerlink&quot; title=&quot;最近认真的看了下响应式布局,有些小感想,在这里记述一下吧.&quot;&gt;&lt;/a&gt;最
      
    
    </summary>
    
      <category term="论道" scheme="https://uncleding.top/categories/%E8%AE%BA%E9%81%93/"/>
    
    
      <category term="响应式" scheme="https://uncleding.top/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>丁某人也有个圈子 --Jenkins</title>
    <link href="https://uncleding.top/2019/01/19/%E6%B5%85%E8%B0%88Jenkins/"/>
    <id>https://uncleding.top/2019/01/19/浅谈Jenkins/</id>
    <published>2019-01-19T10:32:28.000Z</published>
    <updated>2019-01-24T06:16:29.157Z</updated>
    
    <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因:"></a>起因:</h5><p> 　因公司要迭代官网,所以借着机会跟着公司大佬们涨了波知识,大概花了三天时间了解了一下Jenkins,一个自动化构建部署工具.学习过程是很崎岖的,充分体会到了什么叫像因式分解一样解决问题.一个问题变成若干个个分支,兜兜转转绕个圈,发现最优方案还是最初的想法.</p><h5 id="经过"><a href="#经过" class="headerlink" title="经过:"></a>经过:</h5><p> 　对于Jenkins的话,个人理解不深,但是大概的一个流程我应该是了解了,我是将工具装在本地,对于Windows操作系统官网上有两种安装方式,一种是直接打的msi包,下载后直接安装到本地,会自动跳转到默认浏览器打开.另一种方案是下载.war文件,本地安装tomcat,将.war文件直接拖入webapps里,之后跑起Tomcat,输入<code>localhost:8080/Jenkins</code><br> 就可以自动安装Jinkins并运行服务,要说两者有什么区别的话,大概查阅了下资料,前者是作为Windows服务进行的,伴随着Windows开机而启动,而后这种方式则是寄宿于Tomcat容器中.这个无关紧要，重点主要是作为GitHub仓库和服务器之间的媒介,如何配置的相关问题.配置这里也不细说了,网上的资料还是比较齐全的,主要把其中几个坑点记述一下,防止以后再犯.</p><ol><li><p>　我所选取的方案是Jenkins安装在本地,通过账号密码连接GitHub仓库,通过ssh连接服务器,进行文件传输部署.所以对于本地连接GitHub的话,webhooks是行不通的,需要本地支持外网访问,所以我选择SCM定时轮询.除了内网穿透工具好像没什么好的解决方案.如果有好的解决方案的大佬可以留言告诉我.感激不尽.</p></li><li><p>　Linux 一定要有一些了解,要能够正确安装以及配置环境,否则在Jinkins上写脚本会比较坑.</p></li><li><p>SSH Publisher里面的Transfers里面如果设置了<code>**/*</code>的话,下面的路径一定要用绝对路径.</p></li></ol><h5 id="结尾"><a href="#结尾" class="headerlink" title="结尾:"></a>结尾:</h5><p> 　剩下的基本上就没有太坑的了,就是个人理解问题了,其实挺简单的事情,我兜了一大圈,也算有个经验了吧.这个工具的应用场景来说的话,我简单想了一下,我的博客是hexo框架搭建的,本质上说就是node环境+GitPages,所以每次发布都要通过命令去更新,如果用Jenkins去作为Middle ware的话,我觉得要方便点的多,监测我的Git push,之后自动脚本运行更新博客.<br>       <code>我说过我会回来吧</code><br>       —-UncleDing</p><p>　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因:&quot;&gt;&lt;/a&gt;起因:&lt;/h5&gt;&lt;p&gt; 　因公司要迭代官网,所以借着机会跟着公司大佬们涨了波知识,大概花了三天时间了解了一下Jenkins,一个自动化构建部署工具.学习过程是
      
    
    </summary>
    
      <category term="论道" scheme="https://uncleding.top/categories/%E8%AE%BA%E9%81%93/"/>
    
    
      <category term="Jenkins" scheme="https://uncleding.top/tags/Jenkins/"/>
    
      <category term="Linux" scheme="https://uncleding.top/tags/Linux/"/>
    
      <category term="自动化部署工具" scheme="https://uncleding.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>小记</title>
    <link href="https://uncleding.top/2018/11/08/%E5%B0%8F%E8%AE%B0/"/>
    <id>https://uncleding.top/2018/11/08/小记/</id>
    <published>2018-11-08T07:11:30.000Z</published>
    <updated>2019-01-24T06:16:25.254Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近在写一个简单的H5-很惭愧磨叽了好几天才有个大概得样子-今天看到一个成熟大佬的相同作品-感悟很大-随手记下几点"><a href="#最近在写一个简单的H5-很惭愧磨叽了好几天才有个大概得样子-今天看到一个成熟大佬的相同作品-感悟很大-随手记下几点" class="headerlink" title="最近在写一个简单的H5,很惭愧磨叽了好几天才有个大概得样子,今天看到一个成熟大佬的相同作品,感悟很大,随手记下几点."></a>最近在写一个简单的H5,很惭愧磨叽了好几天才有个大概得样子,今天看到一个成熟大佬的相同作品,感悟很大,随手记下几点.</h4><h5 id="ES6语法对于代码的语义化和结构条理简洁优雅很有帮助"><a href="#ES6语法对于代码的语义化和结构条理简洁优雅很有帮助" class="headerlink" title="ES6语法对于代码的语义化和结构条理简洁优雅很有帮助"></a>ES6语法对于代码的语义化和结构条理简洁优雅很有帮助</h5><ul><li><p>何时用const何时用let</p><blockquote><p>个人而言当你使用const时,证明该变量不会再被重新赋值,对于代码的可读性而言,让人简单明了;而let声明则针对于那些会被重新赋值的变量.</p></blockquote></li><li><p>解构赋值和扩展运算符</p><blockquote><p>接口设计无疑会决定你的解决方案,但是在接收多段level的数据的时候,对象的解构赋值无疑是一个充满幸福感的选择方案;</p><p>对于遍历一个集合,如果其结果是一个集合的话,灵活运用扩展运算符进行解构,代码档次会提高不少</p></blockquote></li><li><p>getBoundingClientRect()和offset</p><blockquote><p>getBoundingClientRect()相比offset兼容性较好,mounted挂载中自执行该事件,也要在destroyed中销毁该事件</p></blockquote></li><li><p>for… of …</p><blockquote><p>相较于其他遍历方法,for… of…很强大,能够遍历任何具备iterator方法的集合.for…in…更适合遍历对象;可以为类数组对象添加<code>symbol.iterator</code>方法:<code>jQuery.prototype</code></p><p><code>[Symbol.iterator] = Array.prototype</code></p><p><code>[Symbol.iterator];</code></p></blockquote></li><li><p>postCSS</p><blockquote><p>postCSS作为预处理平台,能够将css打乱成AST抽象语法树,</p><p>通过不同的插件可以实现转换,Scss+postCSS是一个不错的方案.</p></blockquote><p><code>从此你从南走,我从北过.</code> –UncleDing</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;最近在写一个简单的H5-很惭愧磨叽了好几天才有个大概得样子-今天看到一个成熟大佬的相同作品-感悟很大-随手记下几点&quot;&gt;&lt;a href=&quot;#最近在写一个简单的H5-很惭愧磨叽了好几天才有个大概得样子-今天看到一个成熟大佬的相同作品-感悟很大-随手记下几点&quot; clas
      
    
    </summary>
    
      <category term="论道 小记" scheme="https://uncleding.top/categories/%E8%AE%BA%E9%81%93-%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://uncleding.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Node.js" scheme="https://uncleding.top/tags/Node-js/"/>
    
      <category term="Markdown" scheme="https://uncleding.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>好久没更博了,今天来一波</title>
    <link href="https://uncleding.top/2018/10/01/%E5%A5%BD%E4%B9%85%E6%B2%A1%E6%9B%B4%E5%8D%9A%E4%BA%86,%E4%BB%8A%E5%A4%A9%E6%9D%A5%E4%B8%80%E6%B3%A2/"/>
    <id>https://uncleding.top/2018/10/01/好久没更博了,今天来一波/</id>
    <published>2018-10-01T00:11:17.000Z</published>
    <updated>2019-01-24T06:16:21.794Z</updated>
    
    <content type="html"><![CDATA[<h5 id="学习前端也有小半年了-感觉自己像是过了一段隧道-见到阳光没多久-就又进入一段隧道-一点拨开云雾见光明的感觉都没有-开个玩笑-其实原因还是本人懒-太过追求新鲜事物-了解到一些东西-就不愿意继续往下深入-这种行为是不可取的-同学们切记-今天呢-就做一个技术的整合-把我这几个月所学-所发现的好东西-好技术-分享给大家-废话不多说-blogging"><a href="#学习前端也有小半年了-感觉自己像是过了一段隧道-见到阳光没多久-就又进入一段隧道-一点拨开云雾见光明的感觉都没有-开个玩笑-其实原因还是本人懒-太过追求新鲜事物-了解到一些东西-就不愿意继续往下深入-这种行为是不可取的-同学们切记-今天呢-就做一个技术的整合-把我这几个月所学-所发现的好东西-好技术-分享给大家-废话不多说-blogging" class="headerlink" title="　　学习前端也有小半年了,感觉自己像是过了一段隧道,见到阳光没多久,就又进入一段隧道,一点拨开云雾见光明的感觉都没有.开个玩笑,其实原因还是本人懒,太过追求新鲜事物,了解到一些东西,就不愿意继续往下深入.这种行为是不可取的,同学们切记.今天呢,就做一个技术的整合,把我这几个月所学,所发现的好东西,好技术,分享给大家.废话不多说,blogging."></a>　　学习前端也有小半年了,感觉自己像是过了一段隧道,见到阳光没多久,就又进入一段隧道,一点拨开云雾见光明的感觉都没有.开个玩笑,其实原因还是本人懒,太过追求新鲜事物,了解到一些东西,就不愿意继续往下深入.这种行为是不可取的,同学们切记.今天呢,就做一个技术的整合,把我这几个月所学,所发现的好东西,好技术,分享给大家.废话不多说,blogging.</h5><hr><h5 id="一、关于Node-js的更新-配置"><a href="#一、关于Node-js的更新-配置" class="headerlink" title="一、关于Node.js的更新,配置"></a>一、关于Node.js的更新,配置</h5><p> 1.Node.js</p><p>  　　学习前端的同学都应该知道一点,”Node是前端工程化最重要的部分”,如果你了解中间件的话,你可以认为他发挥着一个中间件的作用,更准确的说是一个中间层,但是不要过度解读,因为这么说不严谨,只是为了让你们理解.当然这一点你也可以在Node.js的官网上看到,”Node.js是一个JavaScript运行环境”,运行环境这个词,我相信大家都听过,这个词我第一次见是在Java的jdk中,有个jre文件,全名叫Java runtime environment,翻译成中文就是Java运行环境,里面放置了Java所需要的各种包文件,API,还有JVM虚拟机.跑题了,暴露我曾经是个Java信徒的事实了,哈哈.好,说了半天他到底能干什么,主要是用来做前端工程化环境以及服务端技术,至于详细内容,各种技术网站都有介绍,我也不多说什么了,只能说作为一个初学者不要被各种技术贴所左右,你要有自己的判断,没有确定的事情始终在心里有个保留位置,不要随意跟风.我自岿然不动.</p><p> 2.Node.js更新</p><p>   　　重点来了,这个问题是我之前就想过的,因为上课老师用的最新版的11.1.0版本的node,而我因为早就接触过,用的8.x的版本,我们都知道版本这个东西就是个定时炸弹,今天不响明天响.所以我很早就在想如何实现node的更新,有想到过索性就用docker容器来搞,用哪个版本拉个镜像就好了,后来由于本人有点懒,还是打算找别的方法,有人说卸载重装,太暴力了好么,编程是一种艺术,引用我们金老师的话,”要优雅”,而且这么做对于未来的开发场景问题也很大,如果需要你兼容某几个版本岂不是捉虾.那该怎么办呢,这时候我们的nvm登场了 <code>nvm是一个node的版本管理工具,他的灵感来源于Linux的n</code>,好吧,Linux的好东西还是好多的.这个东西怎么用呢,首先,你要卸载你的node运行环境,包括c盘下的npm文件夹,因为你再次安装node并不会覆盖,会出现意料不到的问题.那么接下来我们只需要去下载nvm的安装包,<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm</a>直接安装就好,安装好之后,直接在doc中运行<code>nvm -v</code>,显示出版本就证明安装好了,之后的东西就了不起了,相当考验你的智商了,<code>输入 nvm install [node版本号]</code>,就行了,为了测试,你可以下一个11.X版本的,之后再下载一个10.X版本的,下载完成后,输入<code>node -v</code>和<code>npm -v</code>测试一下,之后厉害的来了,输入<code>nvm use [已安装的版本号]</code> 切换版本,之后会显示两次windows弹窗,点击确定,之后命令行会出现<code>Now using node v11.1.0 (64-bit)</code>,这时候你就切换到这个版本了,怎么样,是不是很考验智商.</p><p> 3.Npm换源</p><p>   　　我们都知道npm是node的包管理工具,那么问题来了,国内有一堵大墙,我们平常使用npm下载就会很慢很慢,而且比较容易出问题,这堵墙不是让他过不来,还是有一部分能过来的.这时候会有人说用cnpm,cnpm这个东西是国内淘宝镜像,但是明确的说,最好不要用,因为cnpm是一个阉割版的npm,可以说他充满了很多商业色彩,那你会问,不让我们用cnpm,npm下载还慢,那怎么办.哎,这时候我们的nrm出现了,nrm是一个npm源管理工具,你可以随意的切换源,添加源.我们看看操作步骤.首先你要通过<code>npm i nrm -g</code>,安装好之后一样看版本,出现了就是安装成功了,之后也很高智商,<code>nrm ls</code>显示所有源列表.之后<code>nrm use taobao</code>我么使用淘宝这个源,就ok了.速度就会快很多了</p><h5 id="二、学会使用Markdown吧"><a href="#二、学会使用Markdown吧" class="headerlink" title="二、学会使用Markdown吧"></a>二、学会使用Markdown吧</h5><p> 　　Markdown是什么,我现在这篇博客就是用markdown写的,是目前最流行的博客文档格式.应用场景的话,我觉得简历比较适合用markdown去写,排版比较好看.之后转成pdf格式就好了.语法上非常简单,我在这里也不做过多陈述了,网上的用法也是比较多的.至于你也想要有个博客,参考我第一篇博文吧,当然不是很详细,容我日后改一改,但是思路是对的,可以根据我这篇博文顺便加上谷歌搜索试一试搭建一下.</p><p>  　　小结一下吧,刚刚突然发现字节跳动还在校招,突然想试试,感兴趣的去字节跳动官网看一看,明天接着更,附上一句名言<code>一切能用javascript去实现的,终将用javascript去实现</code>.下期公布是谁说的.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;学习前端也有小半年了-感觉自己像是过了一段隧道-见到阳光没多久-就又进入一段隧道-一点拨开云雾见光明的感觉都没有-开个玩笑-其实原因还是本人懒-太过追求新鲜事物-了解到一些东西-就不愿意继续往下深入-这种行为是不可取的-同学们切记-今天呢-就做一个技术的整合-把我
      
    
    </summary>
    
      <category term="论道" scheme="https://uncleding.top/categories/%E8%AE%BA%E9%81%93/"/>
    
    
      <category term="前端" scheme="https://uncleding.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Node.js" scheme="https://uncleding.top/tags/Node-js/"/>
    
      <category term="Markdown" scheme="https://uncleding.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Welcome</title>
    <link href="https://uncleding.top/2018/09/25/Welcome/"/>
    <id>https://uncleding.top/2018/09/25/Welcome/</id>
    <published>2018-09-25T05:20:38.000Z</published>
    <updated>2019-01-24T06:16:14.766Z</updated>
    
    <content type="html"><![CDATA[<h5 id="从今天开始-我要通过这个形式来学习技术了-作为一个想要搞全栈的男人-自然也要上能Coding-下能Blogging-好了-不废话了-既然从今天开博-那么自然也不能荒废时间-就简单讲讲我这个博客是如何实现的吧-至于技术-我讲完大概自己看去-网络上最不缺的就是技术分享-我们作为一个高大上的博客-当然这种造轮子的活就不要去讲了"><a href="#从今天开始-我要通过这个形式来学习技术了-作为一个想要搞全栈的男人-自然也要上能Coding-下能Blogging-好了-不废话了-既然从今天开博-那么自然也不能荒废时间-就简单讲讲我这个博客是如何实现的吧-至于技术-我讲完大概自己看去-网络上最不缺的就是技术分享-我们作为一个高大上的博客-当然这种造轮子的活就不要去讲了" class="headerlink" title="从今天开始,我要通过这个形式来学习技术了,作为一个想要搞全栈的男人,自然也要上能Coding,下能Blogging.好了,不废话了,既然从今天开博,那么自然也不能荒废时间,就简单讲讲我这个博客是如何实现的吧,至于技术,我讲完大概自己看去,网络上最不缺的就是技术分享.我们作为一个高大上的博客,当然这种造轮子的活就不要去讲了."></a>从今天开始,我要通过这个形式来学习技术了,作为一个想要搞全栈的男人,自然也要上能Coding,下能Blogging.好了,不废话了,既然从今天开博,那么自然也不能荒废时间,就简单讲讲我这个博客是如何实现的吧,至于技术,我讲完大概自己看去,网络上最不缺的就是技术分享.我们作为一个高大上的博客,当然这种造轮子的活就不要去讲了.</h5><p>首先我们说一说实现这块</p><ol><li>你需要有一个域名,这个域名你可以在阿里云啊,腾讯云啊去注册,之后实名认证,记得,一定要清晰除了证件别的一点不能漏,因为不太容易通过.</li><li>你需要有一个github账号,这个账号很容易申请,自己百度一下基本上就能弄的七七八八了.可能你会问为什么要github,因为免费啊,你自己买个一年服务器试试多少钱.</li><li>之后就是准备工作了,首先,你要知道我们怎么实现他,你可以在很多github的帖子上看到关于github的操作,比如建库,之后你可以通过github特有的域名来访问你的库,比如说指定文件夹,文件名可以跑一些静态文件,他能够小小的替代服务器的功能.我们这里就要用到通过他的域名访问仓库.<h5 id="好-到这里我们在小小的细化一下-讲一下下面的具体步骤"><a href="#好-到这里我们在小小的细化一下-讲一下下面的具体步骤" class="headerlink" title="好,到这里我们在小小的细化一下,讲一下下面的具体步骤:"></a>好,到这里我们在小小的细化一下,讲一下下面的具体步骤:</h5></li></ol><ul><li>第一步,你要下载node.js,为什么下载node.js,没有为什么,因为咱们要使用的框架hexo就是基于Node.js的,so,去下吧.下载安装的话可以参考百度搜索,千篇一律.</li></ul><ul><li>第二步,下载git,因为我们要用到git bash.有点计算机基础的同学就知道,计算机科学里有壳和核的概念,这个壳也叫shell,分为两种,一种就是图形化的,GUI;一种是命令行似的,非常的cool,推荐大家在之后的操作中用命令行,既然看我的博客,那肯定是学技术的对吧.下载之后一样面向百度编程,去配置.</li><li>第三步,在你的电脑随便一个盘,新建一个文件夹,我这里起名叫Blog,毕竟CET 3的男人,你可以再yy一个纯正的英伦腔,咳咳,接着说之后你可以选择在当前页面打开dos,直接在上面文件夹路径输入CMD,或者Win+R,之后cmd这个东西,刚才说的命令行shell,之后转到当前目录.之后让你很high的时候到了,只要你的node安装成功了,那么,我们就可以用灰常牛的包管理仓库Npm来获取我们想要的东西,npm install hexo 之后你就会看见你的命令行有个中括号在那不断向前填满,很爽.安装完之后你会发现有一堆文件夹,对于前端工程师来说可能很友好,对于搞后台的可能有些蒙,这时候你就需要查,这些配置文件什么意思,之后剩下的就可以你们查完自己就可以来完成了,至于后面博客主题这方面,我选择了next,不说别的,花里胡哨没有用.<h5 id="最后说一下其中的坑吧-其中配置文件中kv对儿-就是键值对-值和冒号中间一定要有空格-你的编译器或许会指引你-再者一定要记住-hexo-clean之后在跑服务器-要不然你会失望的"><a href="#最后说一下其中的坑吧-其中配置文件中kv对儿-就是键值对-值和冒号中间一定要有空格-你的编译器或许会指引你-再者一定要记住-hexo-clean之后在跑服务器-要不然你会失望的" class="headerlink" title="最后说一下其中的坑吧,其中配置文件中kv对儿,就是键值对,值和冒号中间一定要有空格,你的编译器或许会指引你.再者一定要记住 hexo clean之后在跑服务器,要不然你会失望的."></a>最后说一下其中的坑吧,其中配置文件中kv对儿,就是键值对,值和冒号中间一定要有空格,你的编译器或许会指引你.再者一定要记住 hexo clean之后在跑服务器,要不然你会失望的.</h5><code>无论生活如何对待你,请不要放弃你心中所想所念</code>-UncleDing</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;从今天开始-我要通过这个形式来学习技术了-作为一个想要搞全栈的男人-自然也要上能Coding-下能Blogging-好了-不废话了-既然从今天开博-那么自然也不能荒废时间-就简单讲讲我这个博客是如何实现的吧-至于技术-我讲完大概自己看去-网络上最不缺的就是技术分享
      
    
    </summary>
    
      <category term="技术分享" scheme="https://uncleding.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Github" scheme="https://uncleding.top/tags/Github/"/>
    
      <category term="Hexo" scheme="https://uncleding.top/tags/Hexo/"/>
    
      <category term="Javascript" scheme="https://uncleding.top/tags/Javascript/"/>
    
      <category term="npm" scheme="https://uncleding.top/tags/npm/"/>
    
      <category term="Node.js" scheme="https://uncleding.top/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript作用域</title>
    <link href="https://uncleding.top/2018/09/18/JavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://uncleding.top/2018/09/18/JavaScript作用域/</id>
    <published>2018-09-17T22:20:25.000Z</published>
    <updated>2019-01-24T06:16:04.852Z</updated>
    
    <content type="html"><![CDATA[<h5 id="这两天感觉有点懒了-没有继续更新博客-废话少说-今天咱们聊聊这个JS作用域的问题-说实话之前只是会用-毕竟如果只单纯做简单的静态页面的话-JS其实很简单-稍微有点编程基础的人就能学会-但是前面咱们也说了-每一门语言都有其独特的地方-不能一知半解-最近就因为一点很简单的事被学Java的朋友教训了-虽然他说的勉勉强强-但是也给了我一个知识了解的方向-纵观之前写的博客-其实有很多不严谨不正确的地方-待我日后有了深刻理解我再来更正"><a href="#这两天感觉有点懒了-没有继续更新博客-废话少说-今天咱们聊聊这个JS作用域的问题-说实话之前只是会用-毕竟如果只单纯做简单的静态页面的话-JS其实很简单-稍微有点编程基础的人就能学会-但是前面咱们也说了-每一门语言都有其独特的地方-不能一知半解-最近就因为一点很简单的事被学Java的朋友教训了-虽然他说的勉勉强强-但是也给了我一个知识了解的方向-纵观之前写的博客-其实有很多不严谨不正确的地方-待我日后有了深刻理解我再来更正" class="headerlink" title="这两天感觉有点懒了,没有继续更新博客,废话少说,今天咱们聊聊这个JS作用域的问题.说实话之前只是会用,毕竟如果只单纯做简单的静态页面的话,JS其实很简单,稍微有点编程基础的人就能学会,但是前面咱们也说了,每一门语言都有其独特的地方,不能一知半解,最近就因为一点很简单的事被学Java的朋友教训了,虽然他说的勉勉强强,但是也给了我一个知识了解的方向,纵观之前写的博客,其实有很多不严谨不正确的地方,待我日后有了深刻理解我再来更正."></a>这两天感觉有点懒了,没有继续更新博客,废话少说,今天咱们聊聊这个JS作用域的问题.说实话之前只是会用,毕竟如果只单纯做简单的静态页面的话,JS其实很简单,稍微有点编程基础的人就能学会,但是前面咱们也说了,每一门语言都有其独特的地方,不能一知半解,最近就因为一点很简单的事被学Java的朋友教训了,虽然他说的勉勉强强,但是也给了我一个知识了解的方向,纵观之前写的博客,其实有很多不严谨不正确的地方,待我日后有了深刻理解我再来更正.</h5><h5 id="好-回到正题-我们都知道JS是动态语言-跟Java不一样-Java是静态语言-原因就在于Java对于类型要求很严格-而且需要编译成字节码文件-而JS不是这样的-JS采用的是弱类型-而且他相较于Java来说-并不需要编译为中间语言文件-我们都知道-传统的编程语言都需要先编译-后执行-Java先编译-转成字节码文件-虚拟机解释之后再变成机器码执行-而JS是不需要编译的-直接浏览器解析执行-当然也会造就很多问题-比如说-接触过Node-JS的朋友知道-因为他是单线程的-所以一句错了-直接整个就崩了-而像Jsp-tomcat这样的-因为他是多线程的-所以一个线程崩了-其他还是可以运行-所以JS这种运行时检查的特性-也就让前端程序员很头疼-接下来我们看看几个概念"><a href="#好-回到正题-我们都知道JS是动态语言-跟Java不一样-Java是静态语言-原因就在于Java对于类型要求很严格-而且需要编译成字节码文件-而JS不是这样的-JS采用的是弱类型-而且他相较于Java来说-并不需要编译为中间语言文件-我们都知道-传统的编程语言都需要先编译-后执行-Java先编译-转成字节码文件-虚拟机解释之后再变成机器码执行-而JS是不需要编译的-直接浏览器解析执行-当然也会造就很多问题-比如说-接触过Node-JS的朋友知道-因为他是单线程的-所以一句错了-直接整个就崩了-而像Jsp-tomcat这样的-因为他是多线程的-所以一个线程崩了-其他还是可以运行-所以JS这种运行时检查的特性-也就让前端程序员很头疼-接下来我们看看几个概念" class="headerlink" title="好,回到正题,我们都知道JS是动态语言,跟Java不一样,Java是静态语言,原因就在于Java对于类型要求很严格,而且需要编译成字节码文件.而JS不是这样的,JS采用的是弱类型,而且他相较于Java来说,并不需要编译为中间语言文件,我们都知道,传统的编程语言都需要先编译,后执行,Java先编译,转成字节码文件,虚拟机解释之后再变成机器码执行.而JS是不需要编译的,直接浏览器解析执行,当然也会造就很多问题,比如说,接触过Node.JS的朋友知道,因为他是单线程的,所以一句错了,直接整个就崩了.而像Jsp+tomcat这样的,因为他是多线程的,所以一个线程崩了,其他还是可以运行.所以JS这种运行时检查的特性,也就让前端程序员很头疼.接下来我们看看几个概念."></a>好,回到正题,我们都知道JS是动态语言,跟Java不一样,Java是静态语言,原因就在于Java对于类型要求很严格,而且需要编译成字节码文件.而JS不是这样的,JS采用的是弱类型,而且他相较于Java来说,并不需要编译为中间语言文件,我们都知道,传统的编程语言都需要先编译,后执行,Java先编译,转成字节码文件,虚拟机解释之后再变成机器码执行.而JS是不需要编译的,直接浏览器解析执行,当然也会造就很多问题,比如说,接触过Node.JS的朋友知道,因为他是单线程的,所以一句错了,直接整个就崩了.而像Jsp+tomcat这样的,因为他是多线程的,所以一个线程崩了,其他还是可以运行.所以JS这种运行时检查的特性,也就让前端程序员很头疼.接下来我们看看几个概念.</h5><h5 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域:"></a>一、作用域:</h5><p>1.全局作用域和局部作用域:  </p><blockquote><p>全局作用域和局部作用域的区别在于你声明变量是否在函数体中,而且有没有声明的关键字 var 或者 let(ES6);举个例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var apple =1;</span><br><span class="line">function count()&#123;</span><br><span class="line">    console.log(apple);//undefined</span><br><span class="line">    var apple = 2;</span><br><span class="line">    console.log(apple);//2</span><br><span class="line">&#125;</span><br><span class="line">count();</span><br></pre></td></tr></table></figure></p></blockquote><p>这时候你会好奇,为什么是undefined.<br>这其实是JavaScript一个特点,这个叫做变量提前声明.其实上面这段代码等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var apple =1;</span><br><span class="line">function count()&#123;</span><br><span class="line">    var apple;//提前声明了变量</span><br><span class="line">    console.log(apple);//undefined</span><br><span class="line">    var apple = 2;</span><br><span class="line">    console.log(apple);//2</span><br><span class="line">&#125;</span><br><span class="line">count();</span><br></pre></td></tr></table></figure></p><p>到这里我们就要纠正一个观点了,很多人认为JavaScript执行的时候是从上向下逐行执行,这个其实通过这个论证可以认为是错误的,其间的原理我们不着急,接着往下看.  </p><ol start="2"><li>块级作用域<br>很多人会认为JavaScript有块级作用域,以两个大括号中间为边界,但是其实JavaScript并没有块级作用域的概念,JavaScript有的只有函数作用域.我们知道,块级作用域他在使用完之后,便会在内存中销毁,但是JavaScript中,并不会这样.比如说JS三座大山之一的闭包问题,在创建闭包之后,与之相关联的变量并不会在内存中销毁,而是常驻内存,这样会造成内存泄漏等问题,那如何解决呢,我们通过立即执行函数<br><code>(function fn(){//coding})();</code><br>就可以在内存中销毁了,这样便是JavaScript创造的块级作用域.但是既然不是块级作用域,那是什么呢,这便是JavaScript的函数作用域.这也是JS和其他语言最大的不同.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 1; i &lt; 10; i++)&#123;</span><br><span class="line">            //coding</span><br><span class="line">      &#125;</span><br><span class="line">     console.log(i); //10</span><br></pre></td></tr></table></figure></li></ol><h5 id="二、作用域链"><a href="#二、作用域链" class="headerlink" title="二、作用域链"></a>二、作用域链</h5><p>理解了上面的,我们便开始聊聊比较深入的了,就是这个作用域链的问题.我今天看了一位大神的博客,按照我自己的理解说一下.  </p><ol><li>什么是作用域链?<blockquote><p>就是JS有内部函数能够访问外部函数变量的机制,但是如何决定哪些数据能够被访问呢,就需要用链式查找来解决.当然在此之前需要了解一下JS的执行环境这个概念.</p></blockquote></li><li>执行环境<br>每个函数执行的时候,都有一个执行环境,那这个执行环境如何来解决呢,JS为每一个函数的执行环境赋予了一个对象,环境中每一个变量和函数都放在这个对象中.<br>全局执行环境是最外围的执行环境，全局执行环境被认为是window对象，因此所有的全局变量和函数都作为window对象的属性和方法创建的.<br>比如我们经常看到的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = 1;</span><br></pre></td></tr></table></figure></li></ol><p>我们会说num由于没有声明,所以变量提升成为了全局变量,但是在细说的话,其实变量num成为了顶级对象window的一个属性,比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = 1;</span><br><span class="line">alert(window.num);</span><br></pre></td></tr></table></figure></p><p>JS的执行顺序是根据函数的调用来决定的，当一个函数被调用时，该函数环境的变量对象就被压入一个环境栈中。而在函数执行之后，栈将该函数的变量对象弹出，把控制权交给之前的执行环境变量对象.<br>当某个函数第一次被调用时，就会创建一个执行环境(execution context)以及相应的作用域链，并把作用域链赋值给一个特殊的内部属性([scope])。然后使用this，arguments(arguments在全局环境中不存在)和其他命名参数的值来初始化函数的活动对象(activation object)。当前执行环境的变量对象始终在作用域链的第0位。当我开始调用这个函数的时候,这个函数的作用域链就会被压入栈中,位于作用链的第1位,这时候第一位就是顶级对象window了.这个我理解的话其实也就是我们平时说的指针,当然,JavaScript中并没有指针这个说法,这是个误区.<br>之后,我们都知道闭包这个概念,当我们使用闭包时,这个链又变了.当我们外部函数调用完之后,就等待JS的CG(垃圾回收)机制回收销毁,但是由于内部函数引用了外部函数的作用域链,所以外部函数的作用域链断了,他便会常驻内存.说的有些模糊,但是大家可以看看原文作者,<a href="https://blog.csdn.net/whd526/article/details/70990994" target="_blank" rel="noopener">CSDN</a><br>总之这个就是闭包形成的原理.相较于传统指针的说法,这个更求实了一点,用JS的原理解释,会更专业一些.</p><h5 id="三丶闭包"><a href="#三丶闭包" class="headerlink" title="三丶闭包"></a>三丶闭包</h5><ol><li>闭包作用:<br>第一个就是可以读取自身函数外部的变量（沿着作用域链寻找）<br>第二个就是让这些外部变量始终保存在内存中 </li><li>this<br>说起闭包其实没啥说的,就是自己灵活运用.闭包的可玩性很高,很难定性就是这么玩.但是有一个知识点多提一句,就是这个闻者伤心,听者流泪的 this.<br>this指向问题其实很难说,很多人都是说谁调用指向谁,其实这个说法不准确,举个例子吧,之前让我一直很困惑的一段代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var name = &quot;The Window&quot;;</span><br><span class="line">　　var object = &#123;</span><br><span class="line">　　　　name : &quot;My Object&quot;,</span><br><span class="line">　　　　getNameFunc : function()&#123;</span><br><span class="line">　　　　　　return function()&#123;</span><br><span class="line">　　　　　　　　return this.name;</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">　　alert(object.getNameFunc()());//result:The Window</span><br></pre></td></tr></table></figure></li></ol><p>很好奇吧,为什么最后指向的是window.我之前也很不明白,直到今天看了大神的博客,我才明白,原理我就引用一下吧<br><code>this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象调用时，this等于那个对象。不过，匿名函数具有全局性，因此this对象通常指向window</code><br>这是《JavaScript高级程序设计》一书给出的解释.</p><h5 id="看到了吧-每一门语言都有其独特的魅力-我也在学习当中-与君共勉吧"><a href="#看到了吧-每一门语言都有其独特的魅力-我也在学习当中-与君共勉吧" class="headerlink" title="看到了吧,每一门语言都有其独特的魅力,我也在学习当中,与君共勉吧."></a>看到了吧,每一门语言都有其独特的魅力,我也在学习当中,与君共勉吧.</h5><p><code>当日一别,已过期月</code>  –UncleDing</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;这两天感觉有点懒了-没有继续更新博客-废话少说-今天咱们聊聊这个JS作用域的问题-说实话之前只是会用-毕竟如果只单纯做简单的静态页面的话-JS其实很简单-稍微有点编程基础的人就能学会-但是前面咱们也说了-每一门语言都有其独特的地方-不能一知半解-最近就因为一点很简
      
    
    </summary>
    
      <category term="论道" scheme="https://uncleding.top/categories/%E8%AE%BA%E9%81%93/"/>
    
    
      <category term="前端" scheme="https://uncleding.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://uncleding.top/tags/JavaScript/"/>
    
      <category term="编程技术" scheme="https://uncleding.top/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Coding" scheme="https://uncleding.top/tags/Coding/"/>
    
  </entry>
  
</feed>
